{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"medi",
				"mediaURLS"
			],
			[
				"str",
				"streamURL"
			],
			[
				"in",
				"initWithContentOfURL"
			],
			[
				"bea",
				"beanyone"
			],
			[
				"def",
				"defInterface	interface"
			],
			[
				"bac",
				"backdropView"
			],
			[
				"back",
				"backgroundColor"
			],
			[
				"caret",
				"caretView"
			],
			[
				"pro",
				"promptWithAlertMessage"
			],
			[
				"anim",
				"animateWithDuration	animateWithDuration"
			],
			[
				"r",
				"return"
			],
			[
				"kV",
				"kVHeader"
			],
			[
				"label",
				"labelArray"
			],
			[
				"att",
				"attributedString"
			],
			[
				"image",
				"imageWithColor"
			],
			[
				"stand",
				"standardImageView"
			],
			[
				"kGau",
				"kGaussTag"
			],
			[
				"blur",
				"blurImageView"
			],
			[
				"blu",
				"blurImageView"
			],
			[
				"mut",
				"mutableAttributes"
			],
			[
				"mutable",
				"mutableCopy"
			],
			[
				"string",
				"strings"
			],
			[
				"NSMut",
				"NSMutableAttributedString"
			],
			[
				"for",
				"for	For Loop"
			],
			[
				"prima",
				"primaryTextColour"
			],
			[
				"primaryT",
				"primaryTintColour"
			],
			[
				"backgr",
				"backgroundColor"
			],
			[
				"lay",
				"layoutSubviews"
			],
			[
				"UI",
				"UILabel"
			],
			[
				"prim",
				"primaryTextColour"
			],
			[
				"ba",
				"backdropView"
			],
			[
				"class",
				"className"
			],
			[
				"NSS",
				"NSStringFromClass"
			],
			[
				"SKUIH",
				"SKUIHorizontalLockupCollectionViewCell"
			],
			[
				"ani",
				"animateWithDuration	animateWithDuration"
			],
			[
				"kv",
				"kVHeader"
			],
			[
				"hook",
				"hook	logos-hook"
			],
			[
				"CGR",
				"CGRect"
			],
			[
				"hoo",
				"hookInit	logos-hook-init"
			],
			[
				"imae",
				"imageTintedWithColour"
			],
			[
				"pri",
				"primaryTextColour"
			],
			[
				"secondaryText",
				"secondaryTextColor"
			],
			[
				"compl",
				"complementaryColor"
			],
			[
				"colour",
				"colourScheme"
			],
			[
				"is",
				"isEqual"
			],
			[
				"im",
				"implementation"
			],
			[
				"subvi",
				"subviews"
			],
			[
				"supe",
				"Superview"
			],
			[
				"subv",
				"subviews"
			],
			[
				"defi",
				"defInterface	interface"
			],
			[
				"STE",
				"SET_GAUSS_EXCEPTION"
			],
			[
				"CreateBackgroundViewW",
				"CreateBackgroundViewWithFrame"
			],
			[
				"backd",
				"backdropView"
			],
			[
				"UIVI",
				"UIViewControllerWrapperView"
			],
			[
				"UITab",
				"UITableViewCell"
			],
			[
				"sha",
				"sharedApplication"
			],
			[
				"super",
				"superview"
			],
			[
				"enable",
				"enableNowPlayingHooks"
			],
			[
				"bool",
				"boolForSetting"
			],
			[
				"twe",
				"tweakName"
			],
			[
				"col",
				"colourPicker"
			],
			[
				"_secon",
				"_secondaryTextColour"
			],
			[
				"sett",
				"Settings"
			],
			[
				"load",
				"loadColourSettings"
			],
			[
				"_UIB",
				"_UIBackdropView"
			],
			[
				"spe",
				"specifiers"
			],
			[
				"spec",
				"specifierForID"
			],
			[
				"UITabb",
				"UITabBar"
			],
			[
				"newb",
				"newBackdropViewSettings"
			],
			[
				"_UIb",
				"_UIBackdropViewSettings"
			],
			[
				"initWi",
				"initWithFrame"
			],
			[
				"sa",
				"saturationDeltaFactor"
			],
			[
				"CGF",
				"CGFloat"
			],
			[
				"blurr",
				"blurRadius"
			],
			[
				"sat",
				"satuation"
			],
			[
				"kNIF",
				"kNIFBlurRadiusKey"
			],
			[
				"Settings",
				"settings"
			],
			[
				"index",
				"indexOfObject"
			],
			[
				"_c",
				"_specifiers"
			],
			[
				"hex",
				"hexStringForSelectedColour"
			],
			[
				"secon",
				"secondaryTintColour"
			],
			[
				"_sec",
				"_secondaryTextColour"
			],
			[
				"alb",
				"albumLabel"
			],
			[
				"_prim",
				"_primaryTextColour"
			],
			[
				"_pri",
				"_primaryTextColour"
			],
			[
				"Upd",
				"PopUpdate"
			],
			[
				"init",
				"initWithStyle"
			],
			[
				"inte",
				"integerForSetting"
			],
			[
				"save",
				"savedColour"
			],
			[
				"rec",
				"recievedNotification"
			],
			[
				"alp",
				"alphaChannel"
			],
			[
				"alph",
				"alpha"
			],
			[
				"alpha",
				"alphaChannel"
			],
			[
				"titl",
				"titleLabel"
			],
			[
				"sec",
				"secondaryHex"
			],
			[
				"second",
				"secondaryColour"
			],
			[
				"user",
				"userInteractionEnabled"
			],
			[
				"initWith",
				"initWithFrame"
			],
			[
				"UII",
				"UIImageView"
			],
			[
				"CG",
				"CGRect"
			],
			[
				"not",
				"notificationName"
			],
			[
				"kNI",
				"kNIFBlurRadiusKey"
			],
			[
				"flo",
				"floatSettingNamed"
			],
			[
				"num",
				"number"
			],
			[
				"k",
				"kNIFSaturationKey"
			],
			[
				"new",
				"newBackdropSettings"
			],
			[
				"art",
				"artistImage"
			],
			[
				"loa",
				"loadSettings"
			],
			[
				"val",
				"valueMultiplier"
			],
			[
				"va",
				"valueMultiplier"
			],
			[
				"cont",
				"contentView"
			],
			[
				"max",
				"maximumValue"
			],
			[
				"ar",
				"arg3"
			],
			[
				"re",
				"reuseIdentifier"
			],
			[
				"ini",
				"initWithStyle"
			],
			[
				"artis",
				"artistName"
			],
			[
				"sav",
				"savedColourHex"
			],
			[
				"settin",
				"settingsDictionary"
			],
			[
				"setting",
				"settingsName"
			],
			[
				"prop",
				"propertyForKey"
			],
			[
				"tab",
				"tabButton"
			],
			[
				"colo",
				"colour"
			],
			[
				"int",
				"interface"
			],
			[
				"UIV",
				"UIView"
			],
			[
				"tint",
				"tintColor"
			],
			[
				"UIv",
				"UIViewController"
			],
			[
				"Pri",
				"primaryColour"
			],
			[
				"text",
				"textColor"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Tweak.xm",
			"settings":
			{
				"buffer_size": 3372,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/theos.sublime-build",
	"command_palette":
	{
		"height": 375.0,
		"selected_items":
		[
			[
				"plist",
				"Plist Binary: Toggle XML & Binary"
			],
			[
				"pasty",
				"Text Pastry: From 1 To X"
			],
			[
				"past",
				"Text Pastry: From 0 To X"
			],
			[
				"pastry",
				"Text Pastry: From 0 To X"
			],
			[
				"text",
				"Text Pastry: From 0 To X"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"string",
				"Stringify: Java"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"git",
				"Git: Commit"
			],
			[
				"git pu",
				"Git: Push"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add Current File"
			],
			[
				"git pus",
				"Git: Push"
			],
			[
				"git ",
				"Git: Push"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"sublime",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"sublim",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"Sublime",
				"Set Syntax: SublimeClangErrorPanel"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: i",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			]
		],
		"width": 507.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib2,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')",
			"install"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/terrylewis/Documents/Xcode/Stereo/Podfile",
		"/Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/SDKSettings.plist",
		"/Users/terrylewis/Downloads/TS2MP4-0.2.0/Project/Podfile",
		"/Users/terrylewis/Downloads/TS2MP4-0.1.0/Project/Podfile",
		"/Users/terrylewis/Documents/Development/Third Party/gpac_extra_libs/CopyLibs2Public4iOS.sh",
		"/Users/terrylewis/Documents/Development/Third Party/gpac/src/Makefile",
		"/Volumes/Shared/Applications/Windows/IDA/Hex-Rays_IDA_Pro_v6.6_Incl_Decompiler_SDK_Utils_And_Patch_Repack-TOYKIT/Setup/IDA_PRO_SETUP/Setup Passwords.txt",
		"/Users/terrylewis/Documents/Development/Scripts/IPAs/Package/DEBIAN/control",
		"/Users/terrylewis/Documents/Development/Scripts/ipa2deb.sh",
		"/Users/terrylewis/Documents/Development/Scripts/IPAs/template/control",
		"/Users/terrylewis/Desktop/untitled.html",
		"/Users/terrylewis/Tweaks/beanyone/Makefile",
		"/Users/terrylewis/Tweaks/beanyone/Tweak.xm",
		"/Users/terrylewis/Tweaks/gauss_84/GeneralHooks.xm",
		"/Users/terrylewis/Tweaks/gauss_84/gauss/NIFGaussPreviewHeader.xm",
		"/Users/terrylewis/Tweaks/gauss_84/gauss/NIFPreviewPane.m",
		"/Users/terrylewis/Tweaks/gauss_84/NIFPreviewPane.m",
		"/Users/terrylewis/Tweaks/gauss_84/gauss/Gauss.mm",
		"/Users/terrylewis/Tweaks/gauss_84/gauss/Makefile",
		"/Users/terrylewis/Tweaks/gauss_84/CaseHooks.xm",
		"/Users/terrylewis/Tweaks/gauss_84/gauss/Resources/Gauss2.plist",
		"/Users/terrylewis/Tweaks/gauss_84/gauss2helper/Makefile",
		"/Users/terrylewis/Tweaks/gauss_84/control",
		"/Users/terrylewis/Tweaks/gauss_84/gauss/Resources/Customise.plist",
		"/Users/terrylewis/Tweaks/gauss_84/gauss/Resources/Info.plist",
		"/Users/terrylewis/Tweaks/gauss_84/gauss/entry.plist",
		"/Users/terrylewis/Tweaks/gauss_84/gauss/Resources/Gauss.plist",
		"/Users/terrylewis/Tweaks/gauss_84/gauss2helper/Gauss2Helper.xm",
		"/Users/terrylewis/Tweaks/gauss_84/Makefile",
		"/Users/terrylewis/Tweaks/gauss_84/Cells.xm",
		"/Users/terrylewis/Tweaks/gauss_84/NIFSettingsManager.m",
		"/Users/terrylewis/Tweaks/gauss_84/NowPlayingHooks.xm",
		"/Users/terrylewis/Tweaks/gauss_84/ViewControllers.xm",
		"/Users/terrylewis/Tweaks/gauss_84/Gauss.h",
		"/Users/terrylewis/Tweaks/gauss_84/Tweak.xmi",
		"/Users/terrylewis/Tweaks/gauss_84/theos/include/UIKit/UIKeyboardTouchInfo.h",
		"/Users/terrylewis/Tweaks/gauss_84/theos/include/libavutil/threadmessage.h",
		"/Users/terrylewis/Tweaks/gauss/UIColor_Gauss.h",
		"/Users/terrylewis/Tweaks/gauss/UIColor_Gauss.m",
		"/Users/terrylewis/Tweaks/gauss/Tweak.xmi",
		"/Users/terrylewis/Tweaks/gauss/NowPlayingHooks.xm",
		"/Users/terrylewis/Tweaks/gauss/Makefile",
		"/Users/terrylewis/Tweaks/gauss/control",
		"/Users/terrylewis/Tweaks/gauss/LEColorPicker/LEColorPicker.h",
		"/Users/terrylewis/Tweaks/gauss/LEColorPicker/LEColorPicker.m",
		"/Users/terrylewis/Tweaks/gauss/UIColor+Gauss.h",
		"/Users/terrylewis/Tweaks/gauss/AriaGridHook.xm",
		"/Users/terrylewis/Tweaks/gauss/MessagesHooks.xm",
		"/Users/terrylewis/Tweaks/softhid/Tweak.xm",
		"/Users/terrylewis/Tweaks/gauss/gauss/Gauss.mm",
		"/Users/terrylewis/Tweaks/splashback/Tweak.xm",
		"/Users/terrylewis/Tweaks/gauss/gauss.plist",
		"/Users/terrylewis/Tweaks/gauss/gauss/Makefile",
		"/Users/terrylewis/Tweaks/gauss/gauss/Resources/Gauss.plist",
		"/Users/terrylewis/Tweaks/gauss/gauss/Resources/Customise.plist",
		"/Users/terrylewis/Tweaks/gauss/gauss/NIFGaussPreviewHeader.xm",
		"/Users/terrylewis/Tweaks/gauss/gauss/NIFGaussSlider.m",
		"/Users/terrylewis/Tweaks/gauss/gauss/NIFGaussSlider.h",
		"/Users/terrylewis/Tweaks/gauss/gauss/NIFGaussColourCell.m",
		"/Users/terrylewis/Tweaks/gauss/gauss/NIFColourPickerController.m",
		"/Users/terrylewis/Tweaks/gauss/gauss/NIFGaussColourCell.h",
		"/Users/terrylewis/Tweaks/gauss/gauss/NIFColourPickerController.h",
		"/Users/terrylewis/Tweaks/gauss/gauss/UIColor+PXExtensions.m",
		"/Users/terrylewis/Tweaks/gauss/gauss/UIColor+PXExtensions.h",
		"/Users/terrylewis/Tweaks/gauss/gauss/NIFCloneAlbumCell.m",
		"/Users/terrylewis/Documents/working, before scrollview.m",
		"/Users/terrylewis/Documents/rubbish.m",
		"/Users/terrylewis/Tweaks/gauss/NIFSettingsManager.m",
		"/Users/terrylewis/Tweaks/gauss/gauss/NIFGaussPreviewHeader.h",
		"/Users/terrylewis/Tweaks/gauss/Tweak.xm",
		"/Users/terrylewis/Tweaks/gauss/gauss/NIFPreviewPane.m",
		"/Users/terrylewis/Tweaks/gauss/gauss/Resources/CustomiseCells.plist",
		"/Users/terrylewis/Tweaks/gauss/Main.xmi",
		"/Users/terrylewis/Tweaks/gauss/NIFSettingsManager.h",
		"/Users/terrylewis/Tweaks/gauss/gauss/RSBrightnessSlider.m",
		"/Users/terrylewis/Tweaks/gauss/gauss/RSOpacitySlider.m",
		"/Users/terrylewis/Tweaks/gauss/gauss/NIFCommon.h",
		"/Users/terrylewis/Tweaks/Nightmode8/nightmodesettings/NIFGaussSlider.m",
		"/Users/terrylewis/Tweaks/Nightmode8/nightmodesettings/NIFGaussSlider.h",
		"/Users/terrylewis/Tweaks/gauss/gauss/NIFPreviewPane.h",
		"/Users/terrylewis/Tweaks/gauss/gauss/NIFGaussPreviewHeader.m",
		"/Users/terrylewis/Desktop/it.sh",
		"/usr/bin/itun.sh",
		"/Users/terrylewis/Tweaks/gauss/gauss/RSBrightnessSlider.h",
		"/Users/terrylewis/Tweaks/gauss/gauss/RSOpacitySlider.h",
		"/Users/terrylewis/Tweaks/gauss/gauss/entry.plist",
		"/Users/terrylewis/Downloads/RSColorPicker-master/RSColorPicker/RSBrightnessSlider.m",
		"/Users/terrylewis/Downloads/RSColorPicker-master/RSColorPicker/RSBrightnessSlider.h",
		"/Users/terrylewis/Downloads/RSColorPicker-master/RSColorPicker/RSOpacitySlider.h",
		"/Users/terrylewis/Downloads/RSColorPicker-master/RSColorPicker/RSOpacitySlider.m",
		"/Users/terrylewis/Documents/dyn.py",
		"/Users/terrylewis/Tweaks/gauss/Gauss.mm",
		"/Users/terrylewis/Documents/OptusTranscript.txt",
		"/Users/terrylewis/Documents/Xcode/4leaf/.gitignore",
		"/Users/terrylewis/Documents/Xcode/4leaf/CustomPods/ActionSheetPicker-3.0/Pickers/AbstractActionSheetPicker.m",
		"/Users/terrylewis/Documents/Xcode/4leaf/CustomPods/ActionSheetPicker-3.0/Pickers/ActionSheetCustomPicker.m",
		"/Users/terrylewis/Documents/Xcode/4leaf/CustomPods/ActionSheetPicker-3.0/Pickers/ActionSheetDatePicker.m",
		"/Users/terrylewis/Documents/Xcode/4leaf/CustomPods/ActionSheetPicker-3.0/Pickers/ActionSheetStringPicker.m",
		"/Users/terrylewis/Documents/Xcode/4leaf/CustomPods/ActionSheetPicker-3.0/Pickers/SWActionSheet.m",
		"/Users/terrylewis/Documents/Xcode/4leaf/Podfile",
		"/Users/terrylewis/Documents/Development/ffmpeg/newffm/FFmpeg-iOS-build-script/build-ffmpeg.sh",
		"/Users/terrylewis/Desktop/cap2.html",
		"/Users/terrylewis/Desktop/f7f.css",
		"/Users/terrylewis/Library/Application Support/Sublime Text 3/Packages/HTML-CSS-JS Prettify/.jsbeautifyrc",
		"/Users/terrylewis/Downloads/Framework7-1.0.5/kitchen-sink/css/kitchen-sink.css",
		"/Users/terrylewis/Downloads/Framework7-1.0.5/examples/inline-pages/css/my-app.css",
		"/Users/terrylewis/Downloads/Framework7-1.0.5/modules.json",
		"/Users/terrylewis/Downloads/Framework7-1.0.5/README.md",
		"/Users/terrylewis/Documents/WebM/ffmpeg-progress.sh",
		"/Users/terrylewis/Documents/Development/ffmpeg/newffm/FFmpeg-iOS-build-script/x264-ios/build-x264.sh",
		"/Users/terrylewis/Documents/Development/ffmpeg/ffmpeg-g/ffserver_g",
		"/Users/terrylewis/Documents/edupass.txt",
		"/Users/terrylewis/Development/CocoaFFmpeg/build-ffmpeg.sh",
		"/Users/terrylewis/Development/CocoaFFmpeg/build-librtmp.sh",
		"/Users/terrylewis/Development/CocoaFFmpeg/README.md",
		"/Users/terrylewis/Documents/Development/ffmpeg/ffmpeg-g/doc/examples/Makefile",
		"/Users/terrylewis/Documents/Development/ffmpeg/ffmpeg-g/doc/examples/README",
		"/Users/terrylewis/Documents/error",
		"/Users/terrylewis/Documents/Development/ffmpeg/ffmpeg/ffmpeg.h",
		"/Users/terrylewis/Documents/Development/ffmpeg/ffmpeg/Makefile",
		"/Users/terrylewis/Documents/Development/ffmpeg/ffmpeg/ffmpeg.xm",
		"/opt/iOSOpenDev/bin/iosod",
		"/Users/terrylewis/Tweaks/Nightmode8/control",
		"/Users/terrylewis/Tweaks/Nightmode8/nightmodesettings/NightmodeSettings.x",
		"/Users/terrylewis/Tweaks/Nightmode8/nightmodesettings/Makefile",
		"/Users/terrylewis/Tweaks/Nightmode8/Makefile",
		"/Users/terrylewis/Tweaks/Nightmode8/nightmodeactivator/NMActivator.xm",
		"/Users/terrylewis/Tweaks/Nightmode8/nightmodesb/SBTweak.xm"
	],
	"find":
	{
		"height": 30.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"*\n\n,/Users/terrylewis/Tweaks/Nightmode,<open files>",
			"*\n\n,/Users/terrylewis/Tweaks/Nightmode",
			"*\n\n",
			"\n\n",
			"*",
			"",
			"Nightmode.plist",
			"",
			"Makefile",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"%20",
			"../gpac_public/extra_lib/lib/iOS/",
			"BKS",
			"time",
			"startBackgroundingForIdentifier",
			"_updateBackgroundingIndicatorForIdentifier",
			"backgroundingbeh",
			"backgroundbeh",
			"kPlaceholder",
			"titleView",
			"match",
			"imagewithc",
			"imagewi",
			"backdropTintColour",
			"blurTintColour",
			"_blurTintColour",
			"_secondaryTextColour",
			"_primaryTextColour",
			"_secondaryTintColour",
			"_primaryTintColour",
			"previewhe",
			"primaryTintColour",
			"_primaryTintColour",
			"valueMultiplier",
			"titleLabel",
			"artists",
			">>",
			"kRed",
			"skuiplay",
			"        ",
			"hook uist",
			"Jul 24 09:14:36 Terry-Lewiss-iPhone Music[5609] <Warning>: ",
			"Jul 24 09:11:36 Terry-Lewiss-iPhone Music[5458] <Warning>: ",
			"title",
			"*backdropView",
			"CreateBackgroundViewWithFrameAndBlurStyle",
			"colourPicker",
			"gauss",
			"com.nin9tyfour.gauss",
			"com.nin9tyfour.gauss2",
			"com.nin9tyfour.gauss",
			"kInteractiveTransitionEnabled",
			"uipange",
			"imitateCompletedPanAnimated",
			"handlePan",
			"MusicMiniPlayerViewController",
			"imitateCompletedPanAnimated",
			"_YES_",
			"_NO_",
			"imitateCompletedPan",
			"imitateCompletedPan(YES)",
			"imitateCompletedPan(NO)",
			"musicmini",
			"MPUVibrantContentEffectView",
			"themevibrantview",
			"updated v",
			"intera",
			"imitateCompletedPan",
			"kInteractiveTransition",
			"handlep",
			"interactiveTransition",
			"style",
			"headerf",
			"mus",
			"horizon",
			"backdrop",
			"shouldbetransparent",
			"themevibrantview",
			"vibr",
			"hook cal",
			"nowplay",
			"controller",
			"// %config(generator=MobileSubstrate);\n\n#import <UIKit/_UIBackdropView.h>\n#import <UIKit/_UIBackdropViewSettings.h>\n#import \"classes/UIImage+Additions/UIImage+Additions.h\"\n#import \"gauss/NIFCommon.h\"\n#import \"UIColor+Spec-Lite.m\"\n#import <dlfcn.h>\n#import <MediaPlayer/MediaPlayer.h>\n#import \"Constants.h\"\n#import \"UIColor_Gauss.h\"\n#import <ThirdParty/Aspects.h>\n\n#import \"LEColorPicker/LEColorPicker.h\"\n\n#define kClear [UIColor clearColor]\n#define kRed [UIColor redColor]\n#define kPlaceholder [UIColor blackColor]\n#import \"Gauss.h\"\n\n\n// convenient methods to prevent stacking of views...\nstatic void * const kGaussKey = (void*)&kGaussKey;\nstatic NSNumber *const kGaussKeyObject = @(YES);\n#define kGaussTag 46824\n#define SET_GAUSS_EXCEPTION(object) objc_setAssociatedObject(object, kGaussKey, kGaussKeyObject, OBJC_ASSOCIATION_RETAIN_NONATOMIC)\n#define GET_GAUSS_EXCEPTION_FOR(a) objc_getAssociatedObject(a, kGaussKey)\n#define GET_GAUSS_EXCEPTION GET_GAUSS_EXCEPTION_FOR(self)\n#define __MESSAGES_HOOKS__\n#define kSBC - (void)setBackgroundColor:(UIColor *)backgroundColor\n#define kSBCC - (void)setBackgroundColor:(UIColor *)backgroundColor{%orig(kClear);}\n\nstatic NSInteger kBlurStyle;\nstatic CGFloat saturationDeltaFactor, blurRadius;\nstatic BOOL kEnabled, customiseEnabled, useCustomTint, enableNowPlayingHooks, kBlurArtwork, kAdaptiveColours, kTransparentMode;\n\nstatic LEColorScheme *colourScheme;\nstatic LEColorPicker *colourPicker = [[LEColorPicker alloc] init];\n// static MusicTabBarController *sharedMusicTabBarController;\n\nstatic UIColor *primaryTextColour, *secondaryTextColour, *primaryTintColour, *secondaryTintColour, *backdropTintColour;\n\n#define GenSettings(blurStyle) _UIBackdropViewSettings *settings = newBackdropViewSettings();\n\n#define FormBackdropViewWithFrame(arg1) _UIBackdropView *backdropView = [[_UIBackdropView alloc] initWithFrame:arg1 autosizesToFitSuperview:YES settings:settings];\\\nif (kTransparentMode){backdropView.backdropEffectView.hidden = YES;}\n\n#define CreateBackgroundViewWithFrameAndBlurStyleAndTintColourAndTintAlpha(arg1, blurStyle, tintColour, tintAlpha) \\\n								GenSettings(blurStyle);\\\n								FormBackdropViewWithFrame(arg1)\n					\n\n#define CreateBackgroundViewWithFrameAndBlurStyle(arg1, blurStyle)\\\n								GenSettings(blurStyle);\\\n								FormBackdropViewWithFrame(arg1)\n\n#define CreateBackgroundViewWithFrame(arg1)\\\n								CreateBackgroundViewWithFrameAndBlurStyle(arg1, kBlurStyle)\\\n\n#define CreateBackgroundView() CreateBackgroundViewWithFrame(arg1)\n\n#define TransparentBackgroundHooks(); -(void)setBackgroundColor:(UIColor *)backgroundColor{%orig(kClear);}-(UIColor *)backgroundColor{return kClear;}\n\n#import \"NIFSettingsManager.m\"\n\nstatic void LoadSettings(void){\n\n	NSDictionary *settings = [NSDictionary dictionaryWithContentsOfFile:kPrefsPath];\n\n	kEnabled = boolForSetting(@\"Enabled\", YES, settings);\n	if (kEnabled == NO){\n		return;\n	}\n	enableNowPlayingHooks = boolForSetting(@\"NowPlayingHooks\", YES, settings);\n\n    NSString *primaryTintHex, *secondaryTintHex, *blurTintHex, *primaryTextHex, *secondaryTextHex;\n    primaryTextHex = stringForSetting(kPrimaryTextColourKey, @\"F4FCF7FF\", settings);\n    secondaryTextHex = stringForSetting(kSecondaryTextColourKey, @\"E4E4E4FF\", settings);\n    primaryTintHex = stringForSetting(kPrimaryTintColourKey, @\"17A5FFFF\", settings);\n    secondaryTintHex = stringForSetting(kSecondaryTintColourKey, @\"0B4478FF\", settings);\n    blurTintHex = stringForSetting(kBlurTintColourKey, @\"E4E4E4FF\", settings);\n\n    primaryTintColour = [UIColor colorFromHexString:primaryTintHex];\n    secondaryTintColour = [UIColor colorFromHexString:secondaryTintHex];\n    primaryTextColour = [UIColor colorFromHexString:primaryTextHex];\n    secondaryTextColour = [UIColor colorFromHexString:secondaryTextHex];\n    backdropTintColour = [UIColor colorFromHexString:blurTintHex];\n\n	kBlurStyle = integerForSetting(kBlurPresetKey, 0, settings);\n    useCustomTint = boolForSetting(kNIFCustomTintKey, NO, settings);\n\n    customiseEnabled = boolForSetting(kNIFCustomiseKey, NO, settings);\n    if (customiseEnabled)\n    {\n        saturationDeltaFactor = CGFloatForSetting(kNIFSaturationKey, 1.0f, settings);\n        blurRadius = CGFloatForSetting(kNIFBlurRadiusKey, 10.0f, settings);\n    }\n    if (enableNowPlayingHooks)\n    {\n	    kBlurArtwork = boolForSetting(@\"BlurArtwork\", NO, settings);\n	    kAdaptiveColours = boolForSetting(@\"AdaptiveNowPlaying\", NO, settings);\n    }else{\n    	kBlurArtwork = NO;\n    	kAdaptiveColours = NO;\n    }\n	kTransparentMode = boolForSetting(@\"TransparentMode\", NO, settings);\n	if (kTransparentMode)\n	{\n		kBlurArtwork = NO;\n	}\n}\n\nstatic UIImage * imageTintedWithColour(UIColor *colour, UIImage *image){\n	if (!image || !colour)\n	{\n		return image;\n	}\n    UIGraphicsBeginImageContextWithOptions(image.size, NO, image.scale);\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    [colour setFill];\n    CGContextTranslateCTM(context, 0, image.size.height);\n    CGContextScaleCTM(context, 1.0, -1.0);\n    CGContextClipToMask(context, CGRectMake(0, 0, image.size.width, image.size.height), [image CGImage]);\n    CGContextFillRect(context, CGRectMake(0, 0, image.size.width, image.size.height));\n\n    UIImage *coloredImg = UIGraphicsGetImageFromCurrentImageContext();\n\n    UIGraphicsEndImageContext();\n    return coloredImg;\n}\n\n\nstatic _UIBackdropViewSettings * newBackdropViewSettings(void){\n	_UIBackdropViewSettings *newBackdropSettings = nil;\n\n    if (useCustomTint && backdropTintColour && customiseEnabled){\n        newBackdropSettings = [_UIBackdropViewSettings settingsForStyle:kBlurStyle];\n    }else{\n        newBackdropSettings = [_UIBackdropViewSettings settingsForStyle:kBlurStyle];\n    }\n\n	if (customiseEnabled)\n	{\n	    newBackdropSettings.saturationDeltaFactor = saturationDeltaFactor;\n	    newBackdropSettings.blurRadius = blurRadius;\n\n        if (useCustomTint && backdropTintColour)\n        {\n            newBackdropSettings.usesColorTintView = YES;\n            newBackdropSettings.requiresColorStatistics = YES;\n            newBackdropSettings.colorTintAlpha = 1.0f;\n            newBackdropSettings.colorTint = backdropTintColour;\n        }\n	}\n	[newBackdropSettings setBlurQuality:@\"low\"];\n    return newBackdropSettings;\n}\n\nstatic NSDictionary *lightTextAttributesFromAttributesIfNonexistent(NSDictionary *dict){\n	NSMutableDictionary *dict2 = [dict mutableCopy];\n	if (![dict objectForKey:NSForegroundColorAttributeName])\n	{\n		[dict2 setObject:secondaryTextColour forKey:NSForegroundColorAttributeName];\n		return dict2;\n	}else{\n		[dict2 setObject:primaryTextColour forKey:NSForegroundColorAttributeName];\n		return dict2;\n	}\n	return dict;\n}\n\nstatic NSDictionary *lightTextAttributesFromAttributesWithNewColour(NSDictionary *dict, UIColor *newColour){\n	NSMutableDictionary *dict2 = [dict mutableCopy];\n	[dict2 setObject:newColour forKey:NSForegroundColorAttributeName];\n	// [dict2 setObject:baseShadow() forKey:NSShadowAttributeName];\n	return dict2;\n}\n\nstatic NSDictionary *lightTextAttributesFromAttributes(NSDictionary *dict){\n	return lightTextAttributesFromAttributesWithNewColour(dict, primaryTextColour);\n}\n\n%group Main\n\n%hook UIApplication\n\n- (void)_setBackgroundStyle:(NSInteger)arg1{\n	if (arg1 == 1 || arg1 == 3)\n	{\n		%orig;\n		return;\n	}\n	%orig(1);\n}\n\n%end\n\n%hook MusicApplicationDelegate\n\n- (BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options{\n	[[UIApplication sharedApplication] _setBackgroundStyle:1];\n	return %orig;\n}\n\n%end\n\n// %hook UIStatusBar\n\n// - (void)setForegroundColor:(UIColor *)arg1 animationParameters:(id)arg2{\n// 	NSLog(@\"CALLED setForegroundColor:animationParameters %@\", arg2);\n// 	%orig(primaryTextColour, arg2);\n// }\n\n// %end\n\n%hook UIStatusBar\n\n-(UIColor *)foregroundColor{\n    return primaryTextColour;\n}\n\n-(void)setForegroundColor:(UIColor *)arg1 animationParameters:(id)arg2{\n    %orig(primaryTextColour, arg2);\n}\n\n%end\n\n%hook _UINavigationBarBackground\n\n- (id)initWithFrame:(CGRect)arg1 barStyle:(NSInteger)arg2 barTintColor:(UIColor *)arg3 appearance:(id)arg4 barTranslucence:(NSInteger)arg5{\n    self = %orig;\n    if (self)\n    {\n        // NSLog(@\"Transitioning...\");\n        // dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 2 * NSEC_PER_SEC), dispatch_get_main_queue(), ^{\n        //     [[self _adaptiveBackdrop] transitionToPrivateStyle:0];\n        // });\n        // if ([self _adaptiveBackdrop].style = 2010)\n        // {\n            // self._adaptiveBackdrop.hidden = YES;\n            // self._adaptiveBackdrop.alpha = 0;\n            // self._adaptiveBackdrop.layer.hidden = YES;\n            // [self._adaptiveBackdrop removeFromSuperview];\n            CreateBackgroundView();\n            [self insertSubview:backdropView atIndex:0];\n        // }\n    }\n    return self;\n}\n\n- (BOOL)barWantsAdaptiveBackdrop{\n    return NO;\n}\n\n%end\n\n%hook _UIBackdropView\n\n-(id)initWithSettings:(_UIBackdropViewSettings *)settings{\n	self = %orig;\n	if (self && kTransparentMode == YES)\n	{\n		self.backdropEffectView.hidden = YES;\n	}\n	return self;\n}\n\n// -(id)initWithPrivateStyle:(NSInteger)arg1{\n// 	// return %orig(kBlurStyle);\n// 	// NSLog(@\"Private Style: %li\", (long)arg1);\n// 	// return [self initWithSettings:newBackdropViewSettings()];\n//     NSLog(@\"Init with private style: %li\", (long)arg1);\n//     // self = %orig;\n//     if (%orig)\n//     {\n//         [%orig transitionToSettings:newBackdropViewSettings()];\n//     }\n// 	return %orig;\n// }\n\n- (id)initWithStyle:(NSInteger)arg1{\n	// NSLog(@\"Style: %li\", (long)arg1);\n	return [self initWithSettings:newBackdropViewSettings()];\n	// return %orig(kBlurStyle);\n}\n\n// - (id)initWithFrame:(CGRect)arg1 style:(int)arg2{\n// 	return %orig(arg1, kBlurStyle);\n// }\n\n- (id)initWithFrame:(CGRect)arg1 privateStyle:(NSInteger)arg2{\n	// NSLog(@\"Style: %li\", (long)arg2);\n	return [self initWithFrame:arg1 settings:newBackdropViewSettings()];\n	// return %orig(arg1, kBlurStyle);\n	// return [self initWithFrame:arg1 style:kBlurStyle];\n}\n\n%end\n\n%hook UIWindow\n\nkSBC{\n	%orig(kClear);\n}\n\n%end\n\n%hook MusicLayoutMarginProxyView\n\nkSBC{\n	%orig(kClear);\n}\n\n\n%end\n\n\n\n\n%group Music84\n\n%hook UIWindow\n\nkSBC{\n	%orig(kClear);\n}\n\n- (void)makeKeyAndVisible{\n	%orig;\n	CreateBackgroundViewWithFrame(CGRectZero);\n	[self insertSubview:backdropView atIndex:0];\n}\n\n%end\n\n%hook MPUTextDrawingContext\n\n- (void)_setUniformTextAttributes:(NSDictionary *)unifromTextAttributes{\n    // %orig(@\"HELLO!\");\n    NSMutableDictionary *dict = [unifromTextAttributes mutableCopy];\n    [dict setObject:primaryTextColour forKey:NSForegroundColorAttributeName];\n    %orig(dict);\n}\n\n%end\n\n%hook SKUITextLayoutRequest\n\n-(NSAttributedString *)attributedText{\n    NSMutableAttributedString *mutableAttr = [%orig mutableCopy];\n    NSRange rangeOfTitle = NSMakeRange(0,[mutableAttr length]);\n    [mutableAttr addAttribute:NSForegroundColorAttributeName value:primaryTextColour range:rangeOfTitle];\n    return mutableAttr;\n}\n\n%end\n\n%hook SKUIAttributedStringLayoutRequest\n\n- (NSAttributedString *)attributedString{\n    NSMutableAttributedString *mutableAttr = [%orig mutableCopy];\n    NSRange rangeOfTitle = NSMakeRange(0,[mutableAttr length]);\n    [mutableAttr addAttribute:NSForegroundColorAttributeName value:primaryTextColour range:rangeOfTitle];\n    return mutableAttr;\n}\n\n%end\n\n@interface SKUIHorizontalLockupView : UIView\n@property (nonatomic) UIView *metadataBackgroundView;\n@end\n\n%hook SKUIHorizontalLockupView\n\n// - (void)setMetadataBackgroundView:(UIView *)metadataBackgroundView{\n    \n//     %orig;\n// }\n\n- (void)layoutSubviews{\n    %orig;\n    [self.metadataBackgroundView setBackgroundColor:kClear];\n}\n\n\n%end\n\n\n\n%hook SKUIPlayButtonShapeView\n\n- (CAShapeLayer *)layer{\n    // return nil;\n    static UIColor *fillColourReplacement = nil;\n    static dispatch_once_t once;\n    dispatch_once(&once, ^{\n        fillColourReplacement = [primaryTextColour colorWithAlphaComponent:0.3];\n    });\n    [%orig setFillColor:fillColourReplacement.CGColor];\n    return %orig;\n}\n\n%end\n\n%hook MPUGradientView\n\n- (MPUGradientView *)init{\n    self = %orig;\n    if (self)\n    {\n        self.hidden = YES;\n    }\n    return self;\n}\n\n- (void)setGradientLayer:(CAGradientLayer *)gradientLayer{\n    return;\n}\n\n%end\n\n%hook MusicMediaUberHeaderLegibilityOverlayView\n\n- (UIColor *)bottomGradientColor{\n    return kClear;\n}\n\n- (void)setBottomGradientColor:(UIColor *)bottomGradientColor{\n    %orig(kClear);\n}\n\n%end\n\n%hook MusicEntityTracklistItemView\n\n- (void)setBackgroundColor:(UIColor *)backgroundColor{\n    %orig(kClear);\n}\n\n%end\n\n%end\n\n#import \"ViewControllers.xm\"\n#import \"Cells.xm\"\n\n// %hook MusicEntityHorizontalLockupTableViewHeaderFooterView\n\n// - (id)initWithFrame:(CGRect)frame{\n//     self = %orig;\n//     if (self)\n//     {\n//         self.backgroundColor = [UIColor greenColor];\n//     }\n//     return self;\n// }\n\n// - (void)setBackgroundColor:(UIColor *)backgroundColor{\n//     %orig([UIColor grayColor]);\n// }\n\n// %end\n\nstatic BOOL colorsmatch(UIColor *color1, UIColor *color2)\n{\n    CGFloat red1, red2, green1, green2, blue1, blue2, alpha1, alpha2;\n    [color1 getRed:&red1 green:&green1 blue:&blue1 alpha:&alpha1];\n    [color2 getRed:&red2 green:&green2 blue:&blue2 alpha:&alpha2];\n\n    return (red1 == red2 && green1 == green2 && blue1 == blue2 && alpha1 == alpha2);\n}\n\n// %hook CALayer\n\n// // static Class tempClass;\n\n// - (void)setBackgroundColor:(CGColor *)backgroundColor{\n//     // NSLog(@\"Class of the UIVIEW: %@\", [(UIView *)[self delegate] class]);\n//     Class tmpClass = [(UIView *)[self delegate] class];\n//     if ([tmpClass isKindOfClass:%c(SKUIHorizontalLockupCollectionViewCell)])\n//     {\n//         %orig(kClear.CGColor);\n//         return;\n//     }\n//     %orig;\n// }\n\n// %end\n\n#import \"NowPlayingHooks.xm\"\n#import \"GeneralHooks.xm\"\n\n%ctor{\n	dlopen(\"/Library/MobileSubstrate/DynamicLibraries/Aria.dylib\", RTLD_NOW);\n\n	NSString *kBundleIdentifier = [[NSBundle mainBundle] bundleIdentifier];\n	if (!kBundleIdentifier)\n	{\n		return;\n	}\n\n	LoadSettings();\n	if (kEnabled == NO)\n	{\n		return;\n	}\n\n	%init(Main);\n	%init(Music84);\n	%init(ViewControllerHooks);\n	%init(Cells);\n    %init(GeneralHooks);\n    if (enableNowPlayingHooks)\n    {\n        %init(NowPlayingHooks);\n    }\n\n	[[UIView appearance] setTintColor:primaryTintColour];\n	[[UIImageView appearance] setTintColor:primaryTintColour];\n\n	[[UITextField appearance] setTintColor:[UIColor blueColor]];\n	[[UITextView appearance] setTintColor:[UIColor blueColor]];\n\n	[[UIButton appearance] setTintColor:primaryTintColour];\n	[[UITableView appearance] setSectionIndexColor:primaryTintColour];\n    // [UITabBar appearance].selectedImageTintColor = primaryTintColour;\n    [UITabBar appearance].tintColor = primaryTintColour;\n    CreateBackgroundViewWithFrameAndBlurStyle(CGRectZero, 2060);\n    [[UITableViewCell appearance] setSelectedBackgroundView:backdropView];\n	%init();\n	[[UIApplication sharedApplication] _setBackgroundStyle:3];\n	[[[UIApplication sharedApplication] statusBar] setForegroundColor:primaryTextColour];\n}",
			"statusb",
			"hook uiv",
			"musicn",
			"primaryTextColour",
			"SKUICardViewElementCollectionViewCell",
			"CAL",
			"hook uiv",
			"MusicEntityHorizontalLockupTableViewHeaderFooterView",
			"thingy",
			"CALayer",
			"SKUIHorizontalLockupCollectionViewCell",
			"hook cal",
			"SKUIStorePageSectionsViewController",
			"cells",
			"NowPlayingHooks",
			"setforegroundcolor",
			"imageTintedWithColour",
			"gauss_updatecont",
			"taskqueue",
			"taskQueue",
			"appDidEnterForeground",
			"MPDetailSlider",
			"volumesl",
			"complementa",
			"isdarkco",
			"uicolor",
			"_detailLabel",
			"marq",
			"nslog",
			"hook uitableview",
			"hook uitable",
			"hook uitabl",
			"LoadSettings",
			"foreg",
			"wrapper",
			"TransparentBackgroundHooks",
			"uitabba",
			"uilay",
			"style: ",
			"hook uitable",
			"UITableViewCell",
			"uitableviewcell",
			"MusicMoreNavigationController",
			"uilayout",
			"uitableviewcell",
			"hook uil",
			"uitablevie",
			"hook uitablevie",
			"uitablevie",
			"gauss_fadeBehindViewOutWithBlock",
			"archDisplayController\n\n// - (void)navigationControllerDidCancelShowingViewController:(id)arg1{\n// 	%orig;\n// 	NSLog(@\"UISearchDisplayController: %s\", __PRETTY_FUNCTION__);\n// }\n// - (void)navigationControllerDidShowViewController:(id)arg1{\n// 	%orig;\n// 	NSLog(@\"UISearchDisplayController: %s\", __PRETTY_FUNCTION__);\n// }\n\n// // - (void)searchBarCancelButtonClicked:(id)arg1{\n\n// // 	NSLog(@\"UISearchDisplayController: %s\", __PRETTY_FUNCTION__);\n// // }\n\n// - (void)setActive:(BOOL)arg1 animated:(BOOL)arg2{\n// 	if (arg1 == YES){\n\n// 		if ([[self _containerView] respondsToSelector:@selector(gauss_fixAlpha)]){\n// 			[[self _containerView] gauss_fixAlpha];\n// 		}\n// 		%orig;\n// 		return;\n// 	}\n// 	if ([[self _containerView] respondsToSelector:@selector(gauss_fadeBehindViewOutWithBlock:)])\n// 	{\n// 		[[self _containerView] gauss_fadeBehindViewOutWithBlock:^{\n// 			%orig(arg1, arg2);\n// 		}];\n// 	}\n// }\n\n// %end",
			"uisearch",
			"vignet",
			"pssw",
			"NIFSpecColorCell"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			" ",
			"blurTintColour",
			"secondaryTextColour",
			"primaryTextColour",
			"secondaryTintColour",
			"primaryTintColour",
			"",
			"com.nin9tyfour.gauss2",
			"YES",
			"NO",
			"imitateCompletedPanAnimated",
			"imitateCompletedPan(_NO_)",
			"imitateCompletedPan(_YES_)",
			"kInteractiveTransition",
			"NIFSpecColorCell",
			"NIFGaussColorCell",
			"NIFSpecColourCell",
			"NIFSpecSliderCell",
			"alphaChannel</key>",
			"_customiseSpecifiers",
			"secondaryTextColour",
			"primaryTextColour",
			"_secondaryTintColour",
			"_primaryTintColour",
			"gauss",
			"@property (",
			" NSInteger ",
			"@property (",
			" NSInteger",
			" NSUInteger",
			"CGFloat",
			"pushColourPicker",
			"\"",
			"",
			"\"",
			"scheme",
			"{\n    return reverseColorOf(%orig);\n}",
			"bundleIs(",
			"SwitchSettingChanged",
			"keyboardClass",
			"kred",
			"(globalNightmodeEnabled && nmSBAlertView) || nightmodeEnabled",
			"nightmode",
			"globalNightmodeEnabled && nmSBAlertView",
			"wallpaperDarkenToggled",
			"nmSettingsTheme",
			"nmDynamicallyColourise",
			"globalNightmodeEnabled",
			"dType",
			"ext",
			"name",
			"NM_listSubviewsOfView",
			"NM_lightenLabelsInView",
			"];",
			" a",
			" b",
			" r",
			" g",
			"r c",
			" ",
			" = ",
			"",
			"static UIColor *",
			"UIColor *",
			"\n",
			"define_",
			"\n",
			"\n\n",
			"@end\n",
			"\n",
			"\n\n",
			"sbChatKit",
			"self.table",
			"NMAppListDataSource",
			"NMPerAppController",
			"isSystemApplication = TRUE AND isWebApplication = FALSE AND NOT (displayIdentifier IN {'com.saurik.Cydia','eu.heinelt.ifile','com.apple.Passbook'})",
			"twitterPanel",
			"{\n    return kred;\n}",
			"Colour",
			"classicTint",
			"255.0f",
			"{\n    return kred;\n}",
			".changesettings",
			"%orig(TVbackgroundColor)",
			"setBackgroundColor: TVbackgroundColor];",
			"TintColor: TVbackgroundColor];",
			"Nightmode",
			"0.968f",
			"0.969f",
			"0.966f",
			"f &&",
			"//if (night",
			"]){\n	section = 0;"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Tweak.xm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3372,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"line_numbers": true,
							"syntax": "Packages/Objective-C/Objective-C++.tmLanguage",
							"vintage_lines.line": 0,
							"vintage_lines.lines": 92,
							"vintage_lines.mode": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 196.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 120.0
	},
	"project": "bemeplus.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"",
				"nightmodesettings/Resources/NMCredits.plist"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 375.0,
		"selected_items":
		[
		],
		"width": 516.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 211.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
